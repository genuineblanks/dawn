{% comment %}
Lab Dips & Brand Accessories - Step 3A: Lab Dip Swatches
Premium Professional Interface
{% endcomment %}

<link rel="stylesheet" href="{{ 'lab-dips-premium.css' | asset_url }}?v={{ 'now' | date: '%s' }}">

<section id="lab-dips-step-3a" class="techpack-step" data-step="3a" style="display: none;">
  <div class="techpack-container">
    
    <!-- Progress Bar for Lab Dips Workflow -->
    <div class="techpack-progress">
      <div class="techpack-progress__bar">
        <div class="techpack-progress__fill" style="width: 100%"></div>
      </div>
      <div class="techpack-progress__steps">
        <div class="techpack-progress__step techpack-progress__step--completed">
          <div class="techpack-progress__step-circle techpack-progress__step--completed">1</div>
          <div class="techpack-progress__step-label">Service Selection</div>
        </div>
        <div class="techpack-progress__step techpack-progress__step--active">
          <div class="techpack-progress__step-circle techpack-progress__step-circle--active">2</div>
          <div class="techpack-progress__step-label">Lab Dip Swatches</div>
        </div>
      </div>
    </div>

    <!-- Content -->
    <div class="techpack-content">
      
      <!-- Premium Header -->
      <div class="lab-dips-header">
        <h1 class="lab-dips-title">Lab Dip Swatches</h1>
        <p class="lab-dips-subtitle">Professional color matching service for perfect fabric reproduction</p>
      </div>

      <!-- Service Info Cards -->
      <div class="lab-service-cards">
        <div class="lab-service-card">
          <div class="lab-service-icon">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/>
            </svg>
          </div>
          <div class="lab-service-title">25€ per swatch</div>
          <div class="lab-service-description">Premium quality fabric samples</div>
        </div>
        <div class="lab-service-card">
          <div class="lab-service-icon">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="10"/>
              <polyline points="12 6 12 12 16 14"/>
            </svg>
          </div>
          <div class="lab-service-title">1-2 weeks delivery</div>
          <div class="lab-service-description">Fast turnaround time</div>
        </div>
        <div class="lab-service-card">
          <div class="lab-service-icon">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 2L2 7l10 5 10-5-10-5z"/>
              <path d="M2 17l10 5 10-5"/>
            </svg>
          </div>
          <div class="lab-service-title">Pantone Precision</div>
          <div class="lab-service-description">Industry-standard matching</div>
        </div>
      </div>

      <!-- Color Studio Section -->
      <div class="lab-color-studio">
        <div class="lab-studio-header">
          <div class="lab-studio-title">
            Color Studio
            <span class="lab-studio-badge">Professional</span>
          </div>
          <div class="lab-mode-toggle">
            <button type="button" class="lab-mode-btn active" data-mode="picker" id="lab-picker-mode">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="10"/>
                <path d="M12 2v20M2 12h20"/>
              </svg>
              Color Picker
            </button>
            <button type="button" class="lab-mode-btn" data-mode="manual" id="lab-manual-mode">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 2L2 7l10 5 10-5-10-5z"/>
                <path d="M2 17l10 5 10-5M2 12l10 5 10-5"/>
              </svg>
              Pantone Code
            </button>
          </div>
        </div>

        <!-- Color Picker Mode -->
        <div class="lab-color-mode lab-color-picker-mode" id="lab-picker-section">
          <div class="lab-color-picker-layout">
            <!-- Left: Color Selection Tools -->
            <div class="lab-picker-section">
              <div class="lab-color-input-group">
                <div class="lab-color-input-label">Select Your Color</div>
                <div class="lab-color-picker-wrapper">
                  <input type="color" id="lab-color-picker" class="lab-color-input" value="#2563eb">
                  <input type="text" id="lab-hex-input" class="lab-color-hex-input" placeholder="#000000" value="#2563eb">
                </div>
              </div>
              
              <!-- Quick Color Palette -->
              <div class="lab-quick-colors">
                <div class="lab-color-input-label">Popular Colors</div>
                <div class="lab-quick-color-grid" id="lab-quick-colors">
                  <!-- Will be populated by JavaScript -->
                </div>
              </div>
            </div>

            <!-- Right: Live Preview -->
            <div class="lab-preview-section">
              <div class="lab-preview-swatch" id="lab-preview-swatch"></div>
              <div class="lab-pantone-display">
                <div class="lab-pantone-code" id="lab-pantone-code">PANTONE 2728 C</div>
                <div class="lab-pantone-name" id="lab-pantone-name">Electric Blue</div>
                <div class="lab-pantone-match">Best match from 2,310+ colors</div>
              </div>
              <button type="button" class="lab-add-btn" id="lab-add-color-btn">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <line x1="12" y1="5" x2="12" y2="19"/>
                  <line x1="5" y1="12" x2="19" y2="12"/>
                </svg>
                Add Swatch (25€)
              </button>
            </div>
          </div>
        </div>

        <!-- Manual Entry Mode -->
        <div class="lab-color-mode lab-manual-entry" id="lab-manual-section">
          <div class="lab-manual-input-group">
            <div class="lab-manual-input-wrapper">
              <label class="lab-manual-label" for="lab-pantone-input">Enter Pantone Code</label>
              <input type="text" id="lab-pantone-input" class="lab-manual-input" placeholder="e.g., 18-1664 TPX or PANTONE 2728 C">
            </div>
            <button type="button" class="lab-add-btn" id="lab-add-manual-btn">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="12" y1="5" x2="12" y2="19"/>
                <line x1="5" y1="12" x2="19" y2="12"/>
              </svg>
              Add Swatch (25€)
            </button>
          </div>
        </div>
      </div>

      <!-- Cart-Style Swatch Display -->
      <div class="lab-swatch-cart-section" id="lab-swatch-cart-section" style="display: none;">
        <div class="lab-cart-header">
          <h2 class="lab-cart-title">Your Swatches</h2>
          <div class="lab-cart-summary-badge" id="lab-swatch-count">0 items</div>
        </div>

        <!-- Swatch Items Container -->
        <div class="lab-cart-items" id="lab-cart-items">
          <!-- Items will be added here dynamically -->
        </div>

        <!-- Empty State -->
        <div class="lab-cart-empty" id="lab-empty-state">
          <svg class="lab-empty-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
            <circle cx="12" cy="12" r="10"/>
            <path d="M12 6v6l4 2"/>
          </svg>
          <div class="lab-empty-text">No swatches added yet</div>
          <div class="lab-empty-hint">Use the color studio above to add your first swatch</div>
        </div>
      </div>

      <!-- Order Summary Section -->
      <div class="lab-order-summary" id="lab-order-summary" style="display: none;">
        <div class="lab-summary-header">
          <h3 class="lab-summary-title">Order Summary</h3>
          <span class="lab-summary-badge" id="lab-summary-count">0</span>
        </div>
        
        <div class="lab-summary-content">
          <div class="lab-summary-row">
            <span class="lab-summary-label">Swatches:</span>
            <span class="lab-summary-value" id="lab-summary-swatches">0</span>
          </div>
          <div class="lab-summary-row">
            <span class="lab-summary-label">Price per swatch:</span>
            <span class="lab-summary-value">25€</span>
          </div>
          <div class="lab-summary-divider"></div>
          <div class="lab-summary-row">
            <span class="lab-summary-label">Subtotal:</span>
            <span class="lab-summary-value" id="lab-summary-subtotal">0€</span>
          </div>
          <div class="lab-summary-row">
            <span class="lab-summary-label">Production time:</span>
            <span class="lab-summary-value">1-2 weeks</span>
          </div>
          <div class="lab-summary-divider"></div>
          <div class="lab-summary-total">
            <span class="lab-summary-label">Total:</span>
            <span class="lab-summary-value" id="lab-summary-total">0€</span>
          </div>
        </div>

        <!-- Color Grid Preview -->
        <div class="lab-summary-colors" id="lab-summary-colors">
          <!-- Color previews will be added here -->
        </div>

        <button type="button" class="lab-submit-btn" id="lab-submit-order" disabled>
          Submit Lab Dip Order
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M5 12h14m-7-7l7 7-7 7"/>
          </svg>
        </button>
      </div>

      <!-- Navigation -->
      <div class="lab-navigation">
        <button type="button" class="lab-nav-btn lab-nav-btn--back" id="lab-back-btn">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="m15 18-6-6 6-6"/>
          </svg>
          Back
        </button>
        
        <button type="button" class="lab-nav-btn lab-nav-btn--next" id="lab-continue-btn" disabled>
          Review Order
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M5 12h14m-7-7l7 7-7 7"/>
          </svg>
        </button>
      </div>

    </div>
  </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize Lab Dip Swatches Interface
  const LabDipSwatchManager = {
    swatches: [],
    currentPrice: 25,
    selectedColor: '#2563eb',
    selectedPantone: null,
    
    // DOM Elements
    elements: {
      // Mode toggles
      pickerModeBtn: document.getElementById('lab-picker-mode'),
      manualModeBtn: document.getElementById('lab-manual-mode'),
      pickerSection: document.getElementById('lab-picker-section'),
      manualSection: document.getElementById('lab-manual-section'),
      
      // Color picker elements
      colorPicker: document.getElementById('lab-color-picker'),
      hexInput: document.getElementById('lab-hex-input'),
      previewSwatch: document.getElementById('lab-preview-swatch'),
      pantoneCode: document.getElementById('lab-pantone-code'),
      pantoneName: document.getElementById('lab-pantone-name'),
      addColorBtn: document.getElementById('lab-add-color-btn'),
      
      // Manual entry elements
      pantoneInput: document.getElementById('lab-pantone-input'),
      addManualBtn: document.getElementById('lab-add-manual-btn'),
      
      // Cart elements
      cartSection: document.getElementById('lab-swatch-cart-section'),
      cartItems: document.getElementById('lab-cart-items'),
      emptyState: document.getElementById('lab-empty-state'),
      swatchCount: document.getElementById('lab-swatch-count'),
      
      // Summary elements
      orderSummary: document.getElementById('lab-order-summary'),
      summaryCount: document.getElementById('lab-summary-count'),
      summarySwatches: document.getElementById('lab-summary-swatches'),
      summarySubtotal: document.getElementById('lab-summary-subtotal'),
      summaryTotal: document.getElementById('lab-summary-total'),
      summaryColors: document.getElementById('lab-summary-colors'),
      submitBtn: document.getElementById('lab-submit-order'),
      
      // Navigation
      backBtn: document.getElementById('lab-back-btn'),
      continueBtn: document.getElementById('lab-continue-btn')
    },
    
    // Initialize the interface
    init() {
      try {
        console.log('Initializing Lab Dip Swatch Manager...');
        this.setupEventListeners();
        this.loadPopularColors();
        this.updatePreview();
        console.log('Lab Dip Swatch Manager initialized successfully');
      } catch (error) {
        console.error('Error initializing Lab Dip Swatch Manager:', error);
      }
    },
    
    // Setup all event listeners
    setupEventListeners() {
      // Mode toggle
      this.elements.pickerModeBtn.addEventListener('click', () => this.switchMode('picker'));
      this.elements.manualModeBtn.addEventListener('click', () => this.switchMode('manual'));
      
      // Color picker events
      this.elements.colorPicker.addEventListener('input', (e) => this.handleColorChange(e.target.value));
      this.elements.hexInput.addEventListener('input', (e) => this.handleHexInput(e.target.value));
      this.elements.addColorBtn.addEventListener('click', () => this.addSwatchFromPicker());
      
      // Manual entry events
      this.elements.addManualBtn.addEventListener('click', () => this.addSwatchFromManual());
      this.elements.pantoneInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') this.addSwatchFromManual();
      });
      
      // Navigation
      this.elements.backBtn.addEventListener('click', () => this.navigateBack());
      this.elements.continueBtn.addEventListener('click', () => this.reviewOrder());
      this.elements.submitBtn.addEventListener('click', () => this.submitOrder());
    },
    
    // Switch between color picker and manual entry modes
    switchMode(mode) {
      const isPicker = mode === 'picker';
      
      this.elements.pickerModeBtn.classList.toggle('active', isPicker);
      this.elements.manualModeBtn.classList.toggle('active', !isPicker);
      this.elements.pickerSection.style.display = isPicker ? 'block' : 'none';
      this.elements.manualSection.style.display = isPicker ? 'none' : 'block';
    },
    
    // Handle color picker change
    handleColorChange(color) {
      try {
        this.selectedColor = color;
        if (this.elements.hexInput) {
          this.elements.hexInput.value = color;
        }
        this.updatePreview();
        this.findPantoneMatch(color);
      } catch (error) {
        console.error('Error handling color change:', error);
      }
    },
    
    // Handle hex input change
    handleHexInput(value) {
      try {
        if (/^#[0-9A-Fa-f]{6}$/.test(value)) {
          this.selectedColor = value;
          if (this.elements.colorPicker) {
            this.elements.colorPicker.value = value;
          }
          this.updatePreview();
          this.findPantoneMatch(value);
        }
      } catch (error) {
        console.error('Error handling hex input:', error);
      }
    },
    
    // Update color preview
    updatePreview() {
      try {
        if (this.elements.previewSwatch) {
          this.elements.previewSwatch.style.background = this.selectedColor;
        }
      } catch (error) {
        console.error('Error updating preview:', error);
      }
    },
    
    // Find closest Pantone match using existing techpack system
    findPantoneMatch(color) {
      try {
        // Use the existing techpack findClosestPantoneColors method if available
        if (window.garmentManager && typeof window.garmentManager.findClosestPantoneColors === 'function') {
          const closestPantones = window.garmentManager.findClosestPantoneColors(color, 1);
          if (closestPantones && closestPantones.length > 0) {
            const pantone = closestPantones[0];
            this.selectedPantone = {
              code: pantone.code,
              name: this.getColorName(color)
            };
            
            if (this.elements.pantoneCode) {
              this.elements.pantoneCode.textContent = pantone.code;
            }
            if (this.elements.pantoneName) {
              this.elements.pantoneName.textContent = this.selectedPantone.name;
            }
            return;
          }
        }
        
        // Fallback: basic color name generation
        this.selectedPantone = {
          code: 'PANTONE Custom',
          name: this.getColorName(color)
        };
        
        if (this.elements.pantoneCode) {
          this.elements.pantoneCode.textContent = this.selectedPantone.code;
        }
        if (this.elements.pantoneName) {
          this.elements.pantoneName.textContent = this.selectedPantone.name;
        }
      } catch (error) {
        console.error('Error finding Pantone match:', error);
        // Safe fallback
        this.selectedPantone = {
          code: 'PANTONE Error',
          name: 'Color Match Error'
        };
      }
    },
    
    // Get descriptive color name
    getColorName(color) {
      // Handle both hex color and RGB values
      let r, g, b;
      if (typeof color === 'string' && color.startsWith('#')) {
        r = parseInt(color.substring(1, 3), 16);
        g = parseInt(color.substring(3, 5), 16);
        b = parseInt(color.substring(5, 7), 16);
      } else if (typeof r === 'number') {
        // Legacy support for separate r,g,b parameters
        r = arguments[0];
        g = arguments[1];
        b = arguments[2];
      } else {
        return 'Custom Color';
      }
      
      const brightness = (r + g + b) / 3;
      const maxChannel = Math.max(r, g, b);
      
      if (brightness < 50) return 'Deep Shadow';
      if (brightness > 200) return 'Bright Light';
      
      if (r === maxChannel && r > g + 30) return 'Vibrant Red';
      if (g === maxChannel && g > b + 30) return 'Fresh Green';
      if (b === maxChannel && b > r + 30) return 'Ocean Blue';
      
      return 'Custom Blend';
    },
    
    // Load popular colors
    loadPopularColors() {
      const popularColors = [
        '#000000', '#ffffff', '#dc2626', '#ea580c', '#facc15',
        '#16a34a', '#0ea5e9', '#2563eb', '#7c3aed', '#c026d3'
      ];
      
      const container = document.getElementById('lab-quick-colors');
      if (container) {
        container.innerHTML = popularColors.map(color => `
          <button type="button" class="lab-quick-color" style="background: ${color}" 
                  data-color="${color}" title="${color}"></button>
        `).join('');
        
        container.querySelectorAll('.lab-quick-color').forEach(btn => {
          btn.addEventListener('click', () => this.handleColorChange(btn.dataset.color));
        });
      }
    },
    
    // Add swatch from color picker
    addSwatchFromPicker() {
      if (!this.selectedPantone) {
        this.findPantoneMatch(this.selectedColor);
      }
      
      this.addSwatch({
        id: Date.now(),
        color: this.selectedColor,
        pantone: this.selectedPantone.code,
        name: this.selectedPantone.name,
        type: 'Color Picker',
        price: this.currentPrice
      });
    },
    
    // Add swatch from manual entry
    addSwatchFromManual() {
      const pantoneCode = this.elements.pantoneInput.value.trim();
      if (!pantoneCode) {
        alert('Please enter a Pantone code');
        return;
      }
      
      // Generate a color based on the Pantone code (simplified)
      const color = this.getColorFromPantone(pantoneCode);
      
      this.addSwatch({
        id: Date.now(),
        color: color,
        pantone: pantoneCode.toUpperCase(),
        name: 'Custom Pantone',
        type: 'Manual Entry',
        price: this.currentPrice
      });
      
      this.elements.pantoneInput.value = '';
    },
    
    // Get color from Pantone code using techpack system
    getColorFromPantone(code) {
      // Try to find exact Pantone match in techpack system
      if (window.garmentManager && window.garmentManager.pantoneColors) {
        const pantoneData = window.garmentManager.pantoneColors[code.toUpperCase()];
        if (pantoneData && pantoneData.hex) {
          return pantoneData.hex;
        }
      }
      
      // Fallback: generate color from hash for unknown codes
      let hash = 0;
      for (let i = 0; i < code.length; i++) {
        hash = code.charCodeAt(i) + ((hash << 5) - hash);
      }
      
      const r = Math.abs(hash & 0xFF);
      const g = Math.abs((hash >> 8) & 0xFF);
      const b = Math.abs((hash >> 16) & 0xFF);
      
      return '#' + [r, g, b].map(x => {
        const hex = x.toString(16).padStart(2, '0');
        return hex;
      }).join('');
    },
    
    // Add swatch to the list
    addSwatch(swatch) {
      // Check for duplicates
      if (this.swatches.some(s => s.pantone === swatch.pantone)) {
        this.showToast('This swatch is already in your order', 'warning');
        return;
      }
      
      this.swatches.push(swatch);
      this.renderSwatches();
      this.updateSummary();
      this.showToast('Swatch added successfully!', 'success');
    },
    
    // Remove swatch
    removeSwatch(id) {
      this.swatches = this.swatches.filter(s => s.id !== id);
      this.renderSwatches();
      this.updateSummary();
    },
    
    // Render swatches in cart style
    renderSwatches() {
      const hasSwatches = this.swatches.length > 0;
      
      // Show/hide sections
      this.elements.cartSection.style.display = 'block';
      this.elements.orderSummary.style.display = hasSwatches ? 'block' : 'none';
      this.elements.emptyState.style.display = hasSwatches ? 'none' : 'block';
      this.elements.swatchCount.textContent = `${this.swatches.length} ${this.swatches.length !== 1 ? 'items' : 'item'}`;
      
      if (hasSwatches) {
        this.elements.cartItems.innerHTML = this.swatches.map((swatch, index) => `
          <div class="lab-cart-item">
            <div class="lab-cart-item-color">
              <div class="lab-cart-color-circle" style="background: ${swatch.color}"></div>
            </div>
            <div class="lab-cart-item-details">
              <div class="lab-cart-item-name">
                <div class="lab-cart-color-preview" style="background: ${swatch.color}"></div>
                ${swatch.pantone}
              </div>
              <div class="lab-cart-item-type">Color Picker</div>
            </div>
            <div class="lab-cart-item-assign">
              <select class="lab-cart-assign-select">
                <option value="">Assign</option>
                <option value="fabric">Fabric Swatch</option>
                <option value="garment1">Garment 1</option>
                <option value="garment2">Garment 2</option>
              </select>
            </div>
            <div class="lab-cart-item-remove">
              <button type="button" class="lab-cart-remove-btn" onclick="LabDipSwatchManager.removeSwatch(${swatch.id})">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <line x1="18" y1="6" x2="6" y2="18"/>
                  <line x1="6" y1="6" x2="18" y2="18"/>
                </svg>
              </button>
            </div>
          </div>
        `).join('');
        
        // Add divider and count at the bottom
        this.elements.cartItems.innerHTML += `
          <div class="lab-cart-footer">
            <div class="lab-cart-footer-count">${this.swatches.length}</div>
          </div>
        `;
      }
    },
    
    // Update order summary
    updateSummary() {
      const count = this.swatches.length;
      const total = count * this.currentPrice;
      
      this.elements.summaryCount.textContent = count;
      this.elements.summarySwatches.textContent = count;
      this.elements.summarySubtotal.textContent = `${total}€`;
      this.elements.summaryTotal.textContent = `${total}€`;
      
      // Update color grid
      this.elements.summaryColors.innerHTML = this.swatches.map(swatch => `
        <div class="lab-summary-color" style="background: ${swatch.color}" 
             title="${swatch.pantone}"></div>
      `).join('');
      
      // Enable/disable buttons
      const hasSwatches = count > 0;
      this.elements.submitBtn.disabled = !hasSwatches;
      this.elements.continueBtn.disabled = !hasSwatches;
    },
    
    // Show toast notification
    showToast(message, type = 'success') {
      const toast = document.createElement('div');
      toast.className = `lab-success-toast lab-toast-${type}`;
      toast.innerHTML = `
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M20 6L9 17l-5-5"/>
        </svg>
        ${message}
      `;
      
      document.body.appendChild(toast);
      
      setTimeout(() => {
        toast.style.opacity = '0';
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    },
    
    // Navigation functions
    navigateBack() {
      window.dispatchEvent(new CustomEvent('techpack:navigateToStep', {
        detail: { step: 'lab-dips-step-1' }
      }));
    },
    
    reviewOrder() {
      // Show review modal or navigate to review step
      this.submitOrder();
    },
    
    submitOrder() {
      if (this.swatches.length === 0) return;
      
      // Store order data
      if (window.techPackState) {
        window.techPackState.formData.labDipSwatches = this.swatches;
        window.techPackState.formData.labDipOrderTotal = this.swatches.length * this.currentPrice;
      }
      
      // Show success message
      const orderDetails = `
        Order Summary:
        • ${this.swatches.length} Lab Dip Swatches
        • Total: ${this.swatches.length * this.currentPrice}€
        • Delivery: 1-2 weeks
        
        Swatches ordered:
        ${this.swatches.map(s => `- ${s.pantone}`).join('\n')}
        
        You will receive a confirmation email shortly.
      `;
      
      alert(orderDetails);
      
      // Reset and navigate back
      this.swatches = [];
      this.renderSwatches();
      this.updateSummary();
      
      window.dispatchEvent(new CustomEvent('techpack:navigateToStep', {
        detail: { step: 'submission-type-selection' }
      }));
    }
  };
  
  // Initialize the manager
  window.LabDipSwatchManager = LabDipSwatchManager;
  LabDipSwatchManager.init();
});
</script>

<style>
/* Quick Colors Grid - Dark Theme */
.lab-quick-colors {
  margin-top: 16px;
}

.lab-quick-color-grid {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  gap: 6px;
  margin-top: 8px;
}

.lab-quick-color {
  width: 32px;
  height: 32px;
  border-radius: 4px;
  border: 1px solid var(--lab-dark-border);
  cursor: pointer;
  transition: all 0.2s ease;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.lab-quick-color:hover {
  transform: none;
  border-color: var(--lab-dark-text-tertiary);
  box-shadow: 0 0 0 2px rgba(163, 163, 163, 0.3);
}

/* Toast Styles */
.lab-toast-warning {
  background: var(--lab-warning) !important;
}

.lab-toast-error {
  background: var(--lab-danger) !important;
}

/* Responsive adjustments for quick colors */
@media (max-width: 768px) {
  .lab-quick-color-grid {
    grid-template-columns: repeat(5, 1fr);
  }
  
  .lab-quick-color {
    width: 100%;
    height: 40px;
  }
}
</style>