{% comment %}
  Product Form Component - Futuristic Design
  Handles standard product purchase flow with size selector, color swatches, and buy buttons
  
  Required parameters:
  - product: The current product object
  - product_form_id: Form ID for this product
  - section_id: Section ID
  - is_clothing: Boolean for clothing products
  - is_design_service: Boolean for design services
  - is_accessories: Boolean for accessories
  
  Usage:
  {% render 'product-form', product: product, product_form_id: product_form_id, section_id: section_id %}
{% endcomment %}

<product-form class="futuristic-product-form" data-hide-errors="{{ product.selected_or_first_available_variant.available }}" data-section-id="{{ section_id }}">
  {%- assign product_form_id = product_form_id | default: 'product-form-installment' -%}
  
  <form action="{{ routes.cart_add_url }}" method="post" enctype="multipart/form-data" id="{{ product_form_id }}" class="form" novalidate="novalidate" data-type="add-to-cart-form">
    <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id | default: product.variants.first.id }}" class="product-variant-id">
    
    <!-- Size Selector (for clothing) - Integrated with Shopify variants -->
    {% unless product.has_only_default_variant %}
      {%- for option in product.options_with_values -%}
        {%- if option.name == 'Size' or option.name == 'size' -%}
          <div class="product-size-section">
            <div class="size-header">
              <h4 class="size-label">{{ option.name | upcase }}</h4>
              <button type="button" class="size-guide-link" data-accordion-trigger="size-guide">
                {{ 'products.product.size_guide' | t | default: 'SIZE GUIDE' }}
              </button>
            </div>
            
            <fieldset class="js product-form__input product-form__input--pill size-selector-grid">
              <legend class="form__label visually-hidden">{{ option.name }}</legend>
              {%- for value in option.values -%}
                <input
                  type="radio"
                  id="Option-{{ section_id }}-{{ forloop.index0 }}-{{ forloop.index0 }}"
                  name="options[{{ option.name | escape }}]"
                  value="{{ value | escape }}"
                  form="{{ product_form_id }}"
                  {% if option.selected_value == value %}checked{% endif %}
                  class="size-input"
                >
                <label for="Option-{{ section_id }}-{{ forloop.index0 }}-{{ forloop.index0 }}" class="size-button">
                  {{ value }}
                  <span class="label-unavailable" aria-hidden="true">
                    {{ 'products.product.variant_sold_out_or_unavailable' | t }}
                  </span>
                </label>
              {%- endfor -%}
            </fieldset>
          </div>
        {%- endif -%}
      {%- endfor -%}
    {% endunless %}

    <!-- Color Swatches (for clothing) -->
    {% if is_clothing %}
      {% render 'product-variant-picker', 
        product: product, 
        block: block, 
        product_form_id: product_form_id,
        update_url: update_url %}
    {% endif %}

    <!-- Quantity Selector -->
    <div class="quantity-section">
      <h4 class="quantity-label">{{ 'products.product.quantity.label' | t | default: 'QUANTITY' }}</h4>
      <div class="quantity-wrapper futuristic-quantity">
        <button type="button" class="quantity-btn quantity-decrease" aria-label="{{ 'products.product.quantity.decrease' | t: product: product.title }}">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="5" y1="12" x2="19" y2="12"></line>
          </svg>
        </button>
        <input type="number" 
               name="quantity" 
               id="Quantity-{{ section_id }}" 
               class="quantity-input futuristic-input" 
               value="1" 
               min="1"
               max="99"
               step="1"
               aria-label="{{ 'products.product.quantity.input_label' | t: product: product.title }}">
        <button type="button" class="quantity-btn quantity-increase" aria-label="{{ 'products.product.quantity.increase' | t: product: product.title }}">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="12" y1="5" x2="12" y2="19"></line>
            <line x1="5" y1="12" x2="19" y2="12"></line>
          </svg>
        </button>
      </div>
    </div>

    <!-- Enhanced Quantity & Variant Control JavaScript -->
    <script>
    document.addEventListener('DOMContentLoaded', function() {
      const quantityInput = document.querySelector('.quantity-input');
      const decreaseBtn = document.querySelector('.quantity-decrease');
      const increaseBtn = document.querySelector('.quantity-increase');
      const variantIdInput = document.querySelector('.product-variant-id');

      // Quantity Controls
      if (quantityInput && decreaseBtn && increaseBtn) {
        decreaseBtn.addEventListener('click', function() {
          let currentValue = parseInt(quantityInput.value) || 1;
          if (currentValue > 1) {
            quantityInput.value = currentValue - 1;
            addInputFeedback(quantityInput);
          }
        });

        increaseBtn.addEventListener('click', function() {
          let currentValue = parseInt(quantityInput.value) || 1;
          let maxValue = parseInt(quantityInput.getAttribute('max')) || 99;
          if (currentValue < maxValue) {
            quantityInput.value = currentValue + 1;
            addInputFeedback(quantityInput);
          }
        });

        // Validate quantity input
        quantityInput.addEventListener('change', function() {
          let value = parseInt(this.value);
          let min = parseInt(this.getAttribute('min')) || 1;
          let max = parseInt(this.getAttribute('max')) || 99;
          
          if (isNaN(value) || value < min) {
            this.value = min;
          } else if (value > max) {
            this.value = max;
          }
        });
      }

      // Enhanced visual feedback function
      function addInputFeedback(element) {
        element.style.transform = 'scale(1.05)';
        element.style.transition = 'transform 0.1s ease';
        setTimeout(() => {
          element.style.transform = 'scale(1)';
        }, 100);
      }

      // Size selector integration with Shopify variants
      const sizeInputs = document.querySelectorAll('.size-input');
      
      if (sizeInputs.length > 0 && variantIdInput) {
        // Load variant data from the JSON script
        const variantData = document.querySelector('variant-selects script[type="application/json"]');
        let variants = [];
        
        if (variantData) {
          try {
            variants = JSON.parse(variantData.textContent);
          } catch (e) {
            console.warn('Could not parse variant data');
          }
        }

        // Handle size selection
        sizeInputs.forEach(input => {
          input.addEventListener('change', function() {
            if (this.checked && variants.length > 0) {
              // Find the matching variant
              const selectedSize = this.value;
              const matchingVariant = variants.find(variant => 
                variant.option1 === selectedSize || 
                variant.option2 === selectedSize || 
                variant.option3 === selectedSize
              );
              
              if (matchingVariant && variantIdInput) {
                variantIdInput.value = matchingVariant.id;
                
                // Update URL
                const newUrl = new URL(window.location);
                newUrl.searchParams.set('variant', matchingVariant.id);
                history.replaceState(null, '', newUrl);
                
                // Trigger variant change event for other components
                document.dispatchEvent(new CustomEvent('variant:change', {
                  detail: { variant: matchingVariant }
                }));

                // Update price and availability
                updateVariantInfo(matchingVariant);
              }
            }
          });
        });

        // Update variant information display
        function updateVariantInfo(variant) {
          // Update availability on size buttons
          sizeInputs.forEach(input => {
            const label = document.querySelector(`label[for="${input.id}"]`);
            if (label) {
              const unavailableSpan = label.querySelector('.label-unavailable');
              if (variant.available) {
                label.classList.remove('size-unavailable');
                if (unavailableSpan) unavailableSpan.style.display = 'none';
              } else {
                label.classList.add('size-unavailable');
                if (unavailableSpan) unavailableSpan.style.display = 'block';
              }
            }
          });

          // Update add to cart button
          const addToCartBtn = document.querySelector('.product-form__cart-submit');
          if (addToCartBtn) {
            const btnText = addToCartBtn.querySelector('.btn-text');
            if (variant.available) {
              addToCartBtn.disabled = false;
              addToCartBtn.classList.remove('disabled');
              if (btnText) btnText.textContent = addToCartBtn.dataset.addToCartText || 'ADD TO CART';
            } else {
              addToCartBtn.disabled = true;
              addToCartBtn.classList.add('disabled');
              if (btnText) btnText.textContent = 'SOLD OUT';
            }
          }
        }
      }
    });
    </script>

    <!-- Buy Buttons -->
    <div class="buy-buttons-section">
      <div class="product-form__error-message-wrapper" role="alert" hidden>
        <svg aria-hidden="true" focusable="false" class="icon icon-error" viewBox="0 0 13 13">
          <circle cx="6.5" cy="6.5" r="5.5" stroke="white" stroke-width="2"/>
          <circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B" stroke-width="0.7"/>
          <path d="m5.8 3.6h1.4L7 8.5H6.4L5.8 3.6Z" fill="white"/>
          <path d="M5.8 9.5h1.5v1.2H5.8V9.5Z" fill="white"/>
        </svg>
        <span class="product-form__error-message"></span>
      </div>

      <button
        id="{{ product_form_id }}-submit"
        type="submit"
        name="add"
        class="btn product-form__cart-submit futuristic-add-to-cart"
        {% if product.selected_or_first_available_variant.available == false or quantity_rule_soldout %}
          disabled
        {% endif %}
      >
        <span class="btn-text">
          {%- if product.selected_or_first_available_variant.available == false or quantity_rule_soldout -%}
            {{ 'products.product.sold_out' | t }}
          {%- else -%}
            {{ 'products.product.add_to_cart' | t | default: 'ADD TO CART' }}
          {%- endif -%}
        </span>
        <div class="loading-overlay__spinner hidden">
          <svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
            <circle class="path" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle>
          </svg>
        </div>
      </button>

      <!-- Dynamic Checkout Buttons -->
      {% if block.settings.show_dynamic_checkout %}
        <div class="dynamic-checkout-buttons">
          {{ form | payment_button }}
        </div>
      {% endif %}

      <!-- Gift Card Recipient -->
      {% if block.settings.show_gift_card_recipient and product.gift_card? %}
        <div class="gift-card-recipient">
          {% render 'gift-card-recipient-form', product: product, form: form, section: section %}
        </div>
      {% endif %}
    </div>

    <!-- Pickup Availability -->
    {% if product.selected_or_first_available_variant %}
      <pickup-availability class="product-pickup-availabilities no-js-hidden" 
        data-root-url="{{ routes.root_url }}" 
        data-variant-id="{{ product.selected_or_first_available_variant.id }}" 
        data-has-only-default-variant="{{ product.has_only_default_variant }}" 
        data-product-page-color-scheme="scheme-{{ section.settings.color_scheme.id }}">
        <template>
          <pickup-availability-preview class="pickup-availability-preview">
            {% render 'icon-unavailable' %}
            <div class="pickup-availability-info">
              <p class="caption-large">{{ 'products.product.pickup_availability.unavailable' | t }}</p>
              <button class="pickup-availability-button link link--text underlined-link">
                {{ 'products.product.pickup_availability.refresh' | t }}
              </button>
            </div>
          </pickup-availability-preview>
        </template>
      </pickup-availability>
    {% endif %}
  </form>
</product-form>

<!-- Form submission handling script moved to main script above -->