import React, { useState, useEffect } from 'react';
import { Shirt, Package, Palette, Zap, Info, Calculator, ShoppingCart, Sparkles } from 'lucide-react';

const TextilePriceCalculator = () => {
  const [selectedProgram, setSelectedProgram] = useState('Basic Program');
  const [selectedGarment, setSelectedGarment] = useState('T-Shirt');
  const [fit, setFit] = useState('Boxy Fit');
  const [fabricType, setFabricType] = useState('Jersey');
  const [fabricColor, setFabricColor] = useState('White');
  const [fabricWeight, setFabricWeight] = useState('185 GSM organic');
  const [fadeOutDye, setFadeOutDye] = useState('No');
  const [embellishments, setEmbellishments] = useState([]);
  const [quantity, setQuantity] = useState(300);

  const garmentTypes = [
    { name: 'T-Shirt', icon: '👕', basePrice: 8.50 },
    { name: 'Long Sleeve', icon: '👔', basePrice: 12.30 },
    { name: 'Crewneck', icon: '🧥', basePrice: 15.20 },
    { name: 'Hoodie', icon: '🧥', basePrice: 25.80 },
    { name: 'Zip-Hoodie', icon: '🧥', basePrice: 28.90 },
    { name: 'Tank Top', icon: '🎽', basePrice: 7.20 },
    { name: 'Shorts', icon: '🩳', basePrice: 16.40 },
    { name: 'Sweatpants', icon: '👖', basePrice: 22.60 }
  ];

  const fabricTypes = [
    { name: 'Jersey', multiplier: 1.0 },
    { name: 'Waffle Knit', multiplier: 1.3 }
  ];

  const fabricColors = [
    { name: 'White', cost: 0 },
    { name: 'White RTD', cost: 0.5 },
    { name: 'Black', cost: 0.8 },
    { name: 'Heather Grey', cost: 0.3 },
    { name: 'Custom Color', cost: 2.5 }
  ];

  const fabricWeights = [
    { name: '185 GSM organic', multiplier: 1.0 },
    { name: '235 GSM', multiplier: 1.2 },
    { name: '235 GSM organic', multiplier: 1.4 },
    { name: '295 GSM', multiplier: 1.6 }
  ];

  const embellishmentOptions = [
    { name: 'DTG Print', cost: 3.50, icon: '🖨️' },
    { name: 'Screen Print', cost: 2.80, icon: '🎨' },
    { name: 'Embroidery', cost: 4.20, icon: '🧵' },
    { name: 'Distressing', cost: 5.60, icon: '⚡' },
    { name: 'Sunfade', cost: 3.90, icon: '☀️' },
    { name: 'Stitching', cost: 2.10, icon: '✂️' }
  ];

  const calculatePrice = () => {
    const garment = garmentTypes.find(g => g.name === selectedGarment);
    const fabricTypeData = fabricTypes.find(f => f.name === fabricType);
    const fabricColorData = fabricColors.find(c => c.name === fabricColor);
    const fabricWeightData = fabricWeights.find(w => w.name === fabricWeight);
    
    let basePrice = garment.basePrice;
    basePrice *= fabricTypeData.multiplier;
    basePrice += fabricColorData.cost;
    basePrice *= fabricWeightData.multiplier;
    
    if (fadeOutDye === 'Yes') {
      basePrice += 1.8;
    }
    
    const embellishmentCost = embellishments.reduce((total, embellishment) => {
      const embData = embellishmentOptions.find(e => e.name === embellishment);
      return total + embData.cost;
    }, 0);
    
    const unitCost = basePrice + embellishmentCost;
    const quantityMultiplier = quantity >= 500 ? 0.9 : quantity >= 250 ? 0.95 : 1.0;
    const finalUnitCost = unitCost * quantityMultiplier;
    
    return {
      unitCost: finalUnitCost,
      developmentCost: embellishments.length > 0 ? 150 : 0,
      totalCost: (finalUnitCost * quantity) + (embellishments.length > 0 ? 150 : 0)
    };
  };

  const { unitCost, developmentCost, totalCost } = calculatePrice();

  const toggleEmbellishment = (embellishment) => {
    setEmbellishments(prev => 
      prev.includes(embellishment) 
        ? prev.filter(e => e !== embellishment)
        : [...prev, embellishment]
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white">
      {/* Header */}
      <div className="bg-slate-800/30 backdrop-blur-sm border-b border-slate-700 p-4">
        <div className="flex items-center justify-center gap-3">
          <div className="p-2 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg">
            <Calculator className="w-6 h-6" />
          </div>
          <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
            Textile Manufacturing Calculator
          </h1>
        </div>
      </div>

      <div className="flex h-screen">
        {/* Left Panel - Configuration */}
        <div className="flex-1 p-6 overflow-y-auto">
          {/* Program Selector */}
          <div className="mb-6">
            <select 
              value={selectedProgram}
              onChange={(e) => setSelectedProgram(e.target.value)}
              className="w-full bg-slate-800/50 border border-slate-600 rounded-lg px-4 py-2 text-white focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 transition-all"
            >
              <option>Basic Program</option>
              <option>Premium Program</option>
              <option>Enterprise Program</option>
            </select>
          </div>

          {/* Garment Selection */}
          <div className="mb-6">
            <div className="grid grid-cols-4 gap-3">
              {garmentTypes.map((garment) => (
                <button
                  key={garment.name}
                  onClick={() => setSelectedGarment(garment.name)}
                  className={`p-3 rounded-xl border-2 transition-all hover:scale-105 ${
                    selectedGarment === garment.name
                      ? 'border-blue-500 bg-blue-500/20 shadow-lg shadow-blue-500/25'
                      : 'border-slate-600 bg-slate-800/50 hover:border-slate-500'
                  }`}
                >
                  <div className="text-2xl mb-1">{garment.icon}</div>
                  <div className="text-xs font-medium">{garment.name}</div>
                </button>
              ))}
            </div>
          </div>

          {/* Specifications */}
          <div className="bg-slate-800/30 backdrop-blur-sm border border-slate-700 rounded-xl p-4 mb-6">
            <h2 className="text-lg font-semibold mb-4 text-blue-300">Specification</h2>
            
            <div className="grid grid-cols-5 gap-4">
              {/* Measurements */}
              <div>
                <label className="block text-sm font-medium mb-2 text-slate-300 flex items-center gap-1">
                  Measurements <Info className="w-3 h-3 text-blue-400" />
                </label>
                <div className="text-xs text-slate-400 mb-2">Fit:</div>
                <select 
                  value={fit}
                  onChange={(e) => setFit(e.target.value)}
                  className="w-full bg-slate-700 border border-slate-600 rounded px-2 py-1 text-sm text-white focus:border-blue-500 transition-all"
                >
                  <option>Boxy Fit</option>
                  <option>Regular Fit</option>
                  <option>Slim Fit</option>
                  <option>Oversized</option>
                </select>
              </div>

              {/* Fabric Type */}
              <div>
                <label className="block text-sm font-medium mb-2 text-slate-300 flex items-center gap-1">
                  Fabric Type <Info className="w-3 h-3 text-blue-400" />
                </label>
                <div className="space-y-1">
                  {fabricTypes.map((type) => (
                    <button
                      key={type.name}
                      onClick={() => setFabricType(type.name)}
                      className={`w-full px-2 py-1 rounded text-xs transition-all ${
                        fabricType === type.name
                          ? 'bg-blue-500 text-white'
                          : 'bg-slate-700 text-slate-300 hover:bg-slate-600'
                      }`}
                    >
                      {type.name}
                    </button>
                  ))}
                </div>
              </div>

              {/* Fabric Color */}
              <div>
                <label className="block text-sm font-medium mb-2 text-slate-300 flex items-center gap-1">
                  Fabric Color <Info className="w-3 h-3 text-blue-400" />
                </label>
                <div className="space-y-1">
                  {fabricColors.map((color) => (
                    <button
                      key={color.name}
                      onClick={() => setFabricColor(color.name)}
                      className={`w-full px-2 py-1 rounded text-xs transition-all ${
                        fabricColor === color.name
                          ? 'bg-blue-500 text-white'
                          : 'bg-slate-700 text-slate-300 hover:bg-slate-600'
                      }`}
                    >
                      {color.name}
                    </button>
                  ))}
                </div>
              </div>

              {/* Fabric Weight */}
              <div>
                <label className="block text-sm font-medium mb-2 text-slate-300 flex items-center gap-1">
                  Fabric Weight <Info className="w-3 h-3 text-blue-400" />
                </label>
                <div className="space-y-1">
                  {fabricWeights.map((weight) => (
                    <button
                      key={weight.name}
                      onClick={() => setFabricWeight(weight.name)}
                      className={`w-full px-2 py-1 rounded text-xs transition-all ${
                        fabricWeight === weight.name
                          ? 'bg-blue-500 text-white'
                          : 'bg-slate-700 text-slate-300 hover:bg-slate-600'
                      }`}
                    >
                      {weight.name}
                    </button>
                  ))}
                </div>
              </div>

              {/* Fade Out Dye */}
              <div>
                <label className="block text-sm font-medium mb-2 text-slate-300 flex items-center gap-1">
                  Fade Out Dye <Info className="w-3 h-3 text-blue-400" />
                </label>
                <div className="space-y-1">
                  {['Yes', 'No'].map((option) => (
                    <button
                      key={option}
                      onClick={() => setFadeOutDye(option)}
                      className={`w-full px-2 py-1 rounded text-xs transition-all ${
                        fadeOutDye === option
                          ? 'bg-blue-500 text-white'
                          : 'bg-slate-700 text-slate-300 hover:bg-slate-600'
                      }`}
                    >
                      {option}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* Embellishments */}
          <div className="bg-slate-800/30 backdrop-blur-sm border border-slate-700 rounded-xl p-4 mb-6">
            <h2 className="text-lg font-semibold mb-4 text-blue-300 flex items-center gap-2">
              <Sparkles className="w-5 h-5" />
              Embellishments <Info className="w-3 h-3 text-blue-400" />
            </h2>
            <div className="grid grid-cols-6 gap-3">
              {embellishmentOptions.map((embellishment) => (
                <button
                  key={embellishment.name}
                  onClick={() => toggleEmbellishment(embellishment.name)}
                  className={`p-3 rounded-xl border-2 transition-all hover:scale-105 ${
                    embellishments.includes(embellishment.name)
                      ? 'border-purple-500 bg-purple-500/20 shadow-lg shadow-purple-500/25'
                      : 'border-slate-600 bg-slate-800/50 hover:border-slate-500'
                  }`}
                >
                  <div className="text-sm mb-1">{embellishment.icon}</div>
                  <div className="text-xs font-medium mb-1">{embellishment.name.replace(' ', '\n')}</div>
                </button>
              ))}
            </div>
          </div>

          {/* Order Quantity */}
          <div className="bg-slate-800/30 backdrop-blur-sm border border-slate-700 rounded-xl p-4">
            <h2 className="text-lg font-semibold mb-4 text-blue-300">Order Quantity</h2>
            <div className="flex items-center gap-4">
              <div className="flex-1">
                <input
                  type="range"
                  min="50"
                  max="1000"
                  step="25"
                  value={quantity}
                  onChange={(e) => setQuantity(parseInt(e.target.value))}
                  className="w-full h-2 bg-slate-700 rounded-lg appearance-none cursor-pointer slider"
                />
              </div>
              <div className="bg-slate-700 rounded-lg p-2 min-w-[80px] text-center">
                <div className="text-xl font-bold text-blue-400">{quantity}</div>
              </div>
            </div>
          </div>
        </div>

        {/* Right Panel - Pricing */}
        <div className="w-80 bg-slate-800/50 backdrop-blur-sm border-l border-slate-700 p-6 flex flex-col">
          <div className="flex-1 flex flex-col justify-center">
            {/* Cost Summary */}
            <div className="bg-gradient-to-br from-slate-700/50 to-slate-600/50 rounded-xl p-6 mb-6">
              <div className="grid grid-cols-3 gap-4 text-center mb-6">
                <div>
                  <div className="text-sm text-slate-400 mb-1">Unit Cost</div>
                  <div className="text-2xl font-bold text-green-400">€{unitCost.toFixed(2)}</div>
                </div>
                <div>
                  <div className="text-sm text-slate-400 mb-1">Development Costs</div>
                  <div className="text-2xl font-bold text-orange-400">€{developmentCost.toFixed(2)}</div>
                </div>
                <div>
                  <div className="text-sm text-slate-400 mb-1">Total *</div>
                  <div className="text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
                    €{totalCost.toFixed(2)}
                  </div>
                </div>
              </div>
              
              <div className="text-xs text-slate-400 mb-4">
                * The costs shown are estimates only and are not official quotes.<br/>
                For a formal quote, please register in our software.
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="space-y-3">
            <button className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 px-6 py-3 rounded-xl font-semibold transition-all hover:scale-105 shadow-lg">
              Add to Collection
            </button>
            <button className="w-full bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 px-6 py-3 rounded-xl font-semibold transition-all hover:scale-105 shadow-lg">
              Start Design
            </button>
          </div>
        </div>
      </div>

      <style jsx>{`
        .slider::-webkit-slider-thumb {
          appearance: none;
          height: 16px;
          width: 16px;
          border-radius: 50%;
          background: linear-gradient(45deg, #3B82F6, #8B5CF6);
          cursor: pointer;
          box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);
        }
        
        .slider::-moz-range-thumb {
          height: 16px;
          width: 16px;
          border-radius: 50%;
          background: linear-gradient(45deg, #3B82F6, #8B5CF6);
          cursor: pointer;
          border: none;
          box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);
        }
      `}</style>
    </div>
  );
};

export default TextilePriceCalculator;