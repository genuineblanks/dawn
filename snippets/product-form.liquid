{% comment %}
  Product Form Component - Futuristic Design
  Handles standard product purchase flow with size selector, color swatches, and buy buttons
  
  Required parameters:
  - product: The current product object
  - product_form_id: Form ID for this product
  - section_id: Section ID
  - is_clothing: Boolean for clothing products
  - is_design_service: Boolean for design services
  - is_accessories: Boolean for accessories
  
  Usage:
  {% render 'product-form', product: product, product_form_id: product_form_id, section_id: section_id %}
{% endcomment %}

<product-form class="futuristic-product-form" data-hide-errors="{{ product.selected_or_first_available_variant.available }}" data-section-id="{{ section_id }}">
  {%- assign product_form_id = product_form_id | default: 'product-form-installment' -%}
  
  <form action="{{ routes.cart_add_url }}" method="post" enctype="multipart/form-data" id="{{ product_form_id }}" class="form" novalidate="novalidate" data-type="add-to-cart-form">
    <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id | default: product.variants.first.id }}" class="product-variant-id">
    
    <!-- Size Selector (for clothing) -->
    {% if is_clothing %}
      <div class="product-size-section">
        <div class="size-header">
          <h4 class="size-label">{{ 'products.product.size' | t | default: 'SIZE' }}</h4>
          <button type="button" class="size-guide-link" data-accordion-trigger="size-guide">
            {{ 'products.product.size_guide' | t | default: 'SIZE GUIDE' }}
          </button>
        </div>
        
        <div class="size-selector-grid">
          {% for variant in product.variants %}
            {% assign size = variant.option1 %}
            {% if size != blank %}
              <input type="radio" 
                     id="size-{{ size | handleize }}-{{ section_id }}" 
                     name="variant-size" 
                     value="{{ variant.id }}"
                     class="size-input"
                     {% if variant == product.selected_or_first_available_variant %}checked{% endif %}
                     {% unless variant.available %}disabled{% endunless %}>
              <label for="size-{{ size | handleize }}-{{ section_id }}" 
                     class="size-button {% unless variant.available %}size-unavailable{% endunless %}">
                {{ size }}
              </label>
            {% endif %}
          {% endfor %}
        </div>
      </div>
    {% endif %}

    <!-- Color Swatches (for clothing) -->
    {% if is_clothing %}
      {% render 'product-variant-picker', 
        product: product, 
        block: block, 
        product_form_id: product_form_id,
        update_url: update_url %}
    {% endif %}

    <!-- Quantity Selector -->
    <div class="quantity-section">
      <h4 class="quantity-label">{{ 'products.product.quantity.label' | t | default: 'QUANTITY' }}</h4>
      <div class="quantity-wrapper">
        <button type="button" class="quantity-decrease" aria-label="{{ 'products.product.quantity.decrease' | t: product: product.title }}">
          <svg width="18" height="18" viewBox="0 0 18 18" fill="none">
            <path d="M4.5 9h9" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
          </svg>
        </button>
        <input type="number" 
               name="quantity" 
               id="Quantity-{{ section.id }}" 
               class="quantity-input" 
               value="1" 
               min="1"
               aria-label="{{ 'products.product.quantity.input_label' | t: product: product.title }}">
        <button type="button" class="quantity-increase" aria-label="{{ 'products.product.quantity.increase' | t: product: product.title }}">
          <svg width="18" height="18" viewBox="0 0 18 18" fill="none">
            <path d="M9 4.5v9M4.5 9h9" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
          </svg>
        </button>
      </div>
    </div>

    <!-- Quantity Control JavaScript -->
    <script>
    document.addEventListener('DOMContentLoaded', function() {
      const quantityInput = document.querySelector('.quantity-input');
      const decreaseBtn = document.querySelector('.quantity-decrease');
      const increaseBtn = document.querySelector('.quantity-increase');

      if (quantityInput && decreaseBtn && increaseBtn) {
        decreaseBtn.addEventListener('click', function() {
          let currentValue = parseInt(quantityInput.value);
          if (currentValue > 1) {
            quantityInput.value = currentValue - 1;
            // Add some visual feedback
            quantityInput.style.transform = 'scale(1.1)';
            setTimeout(() => {
              quantityInput.style.transform = 'scale(1)';
            }, 150);
          }
        });

        increaseBtn.addEventListener('click', function() {
          let currentValue = parseInt(quantityInput.value);
          quantityInput.value = currentValue + 1;
          // Add some visual feedback
          quantityInput.style.transform = 'scale(1.1)';
          setTimeout(() => {
            quantityInput.style.transform = 'scale(1)';
          }, 150);
        });

        // Ensure minimum value is 1
        quantityInput.addEventListener('change', function() {
          if (parseInt(quantityInput.value) < 1) {
            quantityInput.value = 1;
          }
        });
      }
    });
    </script>

    <!-- Buy Buttons -->
    <div class="buy-buttons-section">
      <div class="product-form__error-message-wrapper" role="alert" hidden>
        <svg aria-hidden="true" focusable="false" class="icon icon-error" viewBox="0 0 13 13">
          <circle cx="6.5" cy="6.5" r="5.5" stroke="white" stroke-width="2"/>
          <circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B" stroke-width="0.7"/>
          <path d="m5.8 3.6h1.4L7 8.5H6.4L5.8 3.6Z" fill="white"/>
          <path d="M5.8 9.5h1.5v1.2H5.8V9.5Z" fill="white"/>
        </svg>
        <span class="product-form__error-message"></span>
      </div>

      <button
        id="{{ product_form_id }}-submit"
        type="submit"
        name="add"
        class="btn product-form__cart-submit futuristic-add-to-cart"
        {% if product.selected_or_first_available_variant.available == false or quantity_rule_soldout %}
          disabled
        {% endif %}
      >
        <span class="btn-text">
          {%- if product.selected_or_first_available_variant.available == false or quantity_rule_soldout -%}
            {{ 'products.product.sold_out' | t }}
          {%- else -%}
            {{ 'products.product.add_to_cart' | t | default: 'ADD TO CART' }}
          {%- endif -%}
        </span>
        <div class="loading-overlay__spinner hidden">
          <svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
            <circle class="path" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle>
          </svg>
        </div>
      </button>

      <!-- Dynamic Checkout Buttons -->
      {% if block.settings.show_dynamic_checkout %}
        <div class="dynamic-checkout-buttons">
          {{ form | payment_button }}
        </div>
      {% endif %}

      <!-- Gift Card Recipient -->
      {% if block.settings.show_gift_card_recipient and product.gift_card? %}
        <div class="gift-card-recipient">
          {% render 'gift-card-recipient-form', product: product, form: form, section: section %}
        </div>
      {% endif %}
    </div>

    <!-- Pickup Availability -->
    {% if product.selected_or_first_available_variant %}
      <pickup-availability class="product-pickup-availabilities no-js-hidden" 
        data-root-url="{{ routes.root_url }}" 
        data-variant-id="{{ product.selected_or_first_available_variant.id }}" 
        data-has-only-default-variant="{{ product.has_only_default_variant }}" 
        data-product-page-color-scheme="scheme-{{ section.settings.color_scheme.id }}">
        <template>
          <pickup-availability-preview class="pickup-availability-preview">
            {% render 'icon-unavailable' %}
            <div class="pickup-availability-info">
              <p class="caption-large">{{ 'products.product.pickup_availability.unavailable' | t }}</p>
              <button class="pickup-availability-button link link--text underlined-link">
                {{ 'products.product.pickup_availability.refresh' | t }}
              </button>
            </div>
          </pickup-availability-preview>
        </template>
      </pickup-availability>
    {% endif %}
  </form>
</product-form>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Size selector functionality
  const sizeInputs = document.querySelectorAll('.size-input');
  const variantIdInput = document.querySelector('.product-variant-id');
  
  sizeInputs.forEach(input => {
    input.addEventListener('change', function() {
      if (this.checked) {
        variantIdInput.value = this.value;
        
        // Update product URL
        const newUrl = new URL(window.location);
        newUrl.searchParams.set('variant', this.value);
        history.replaceState(null, '', newUrl);
        
        // Trigger variant change event
        document.dispatchEvent(new CustomEvent('variant:change', {
          detail: {
            variant: {
              id: this.value
            }
          }
        }));
      }
    });
  });

  // Form submission handling
  const form = document.getElementById('{{ product_form_id }}');
  const submitButton = document.getElementById('{{ product_form_id }}-submit');
  
  if (form && submitButton) {
    form.addEventListener('submit', function(e) {
      const formData = new FormData(this);
      const variantId = formData.get('id');
      
      if (!variantId) {
        e.preventDefault();
        return;
      }
      
      // Add loading state
      submitButton.classList.add('loading');
      submitButton.disabled = true;
      
      // Show loading spinner
      const spinner = submitButton.querySelector('.loading-overlay__spinner');
      const btnText = submitButton.querySelector('.btn-text');
      
      if (spinner && btnText) {
        btnText.style.opacity = '0';
        spinner.classList.remove('hidden');
      }
    });
  }
});
</script>