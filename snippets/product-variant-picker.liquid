{% comment %}
  Renders product variant-picker

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  - update_url: {Boolean} whether or not to update url when changing variants. If false, the url isn't updated. Default: true (optional).
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}

{%- liquid
  # Smart product type detection for color picker visibility
  assign show_color_picker = false
  assign is_clothing_product = false
  
  # Check if this is a clothing product that should show color picker
  if product.type == 'Jacket' or product.type == 'Hoodie' or product.type == 'Sweatshirt' or product.type == 'T-Shirt' or product.type == 'Sweatpants' or product.type == 'Clothing'
    assign is_clothing_product = true
    assign show_color_picker = true
  endif
  
  # Also check tags for clothing indicators
  if product.tags contains 'clothing' or product.tags contains 'apparel' or product.tags contains 'garment'
    assign is_clothing_product = true
    assign show_color_picker = true
  endif
  
  # Hide color picker for services and accessories
  if product.type == 'Design' or product.type == 'Accessories' or product.type == 'Service'
    assign show_color_picker = false
  endif
  
  if product.tags contains 'design-services' or product.tags contains 'accessories' or product.tags contains 'service'
    assign show_color_picker = false
  endif
-%}

{% if show_color_picker %}
{% assign productdata = product.metafields.custom.color_products.value  %}
{% assign currentcolor = product.metafields.custom.product_color %}

<div class="enhanced-color-picker">
  <h4 class="color-picker-title">{{ 'products.product.color' | t | default: 'COLORS' }}</h4>
  
  {% comment %} Complete color palette for GenuineBlanks {% endcomment %}
  {% assign color_labels = 'Black,White,Grey Fade-out,Blue,Brown,Purple,Custom' | split: ',' %}
  {% assign color_codes = '#000000,#FFFFFF,#808080,#4A90E2,#8B4513,#800080,gradient' | split: ',' %}
  
  <ul class="productcolors enhanced">
    <li class="color-option-wrapper">
      <a href="javascript:void(0);" 
         class="prodlink active color-option" 
         style="background:{{ currentcolor }};"
         data-color-name="{{ product.title | split: ' ' | last }}"
         title="Current: {{ product.title | split: ' ' | last }}">
      </a>
    </li>
    
    {% for productmeta in productdata %}
      {% assign metafieldcolor = productmeta.metafields.custom.product_color %}
      {% if metafieldcolor != blank %}
        {% assign color_name = productmeta.title | split: ' ' | last %}
        <li class="color-option-wrapper productitems">
          <a href="{{ productmeta.url }}" 
             class="prodlink color-option" 
             style="background:{{ metafieldcolor }};"
             data-color-name="{{ color_name }}"
             title="{{ color_name }}">
          </a>
        </li>
      {% endif %}
    {% endfor %}
    
    <li class="color-option-wrapper custom-wrapper">
      <a href="" 
         title="Custom Color" 
         class="prodlink custom-color color-option">
        <img src="https://cdn.shopify.com/s/files/1/0686/0809/8520/files/multiColor.png?v=1720504665" 
             height="35px" 
             width="35px"
             alt="Custom Color">
      </a>
    </li>
  </ul>
  
  {% if productdata.size < 6 %}
    <div class="color-availability-note">
      <small>{{ 'products.product.color_availability' | t | default: 'More colors coming soon' }}</small>
    </div>
  {% endif %}
</div>
  <!-- Custom Color Input Panel -->
  <div class="custom-color-input hide" id="custom-color-input">    
    <label for="custom-color-picker" class="custom-color-label">Select your custom color:</label>
    <div class="custom-color-controls">
      <input type="color" id="custom-color-picker" name="properties[Custom Color]" value="#ff0000" class="custom-color-field" disabled>
      <button type="button" class="apply-custom-color btn-secondary">Apply Color</button>
      <button type="button" class="cancel-custom-color btn-tertiary">Cancel</button>
    </div>
  </div>

{% endif %}

{%- unless product.has_only_default_variant -%}
  <variant-selects
    id="variant-selects-{{ section.id }}"
    class="no-js-hidden"
    data-section="{{ section.id }}"
    data-url="{{ product.url }}"
    {% if update_url == false %}
      data-update-url="false"
    {% endif %}
    {{ block.shopify_attributes }}
  >
    {%- for option in product.options_with_values -%}
      {%- liquid
        assign swatch_count = option.values | map: 'swatch' | compact | size
        assign picker_type = block.settings.picker_type
        if swatch_count > 0 and block.settings.swatch_shape != 'none'
          if block.settings.picker_type == 'dropdown'
            assign picker_type = 'swatch_dropdown'
          else
            assign picker_type = 'swatch'
          endif
        endif
         if block.settings.enable_color_swatch == true and option.name == 'Color' or option.name == 'colour'
           if picker_type == 'dropdown' or picker_type == 'button' and option.name == 'Color' or option.name == 'colour' or option.name == 'Colour' or option.name == 'color'
            assign picker_type = 'swatch'
           endif
         endif
       
      -%}
      {%- if picker_type == 'swatch' -%}
        <fieldset class="js product-form__input product-form__input--swatch">
          <legend class="form__label">
            {{ option.name }}:
            <span data-selected-swatch-value="{{ option.name }}">
              {{- option.selected_value -}}
            </span>
          </legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- elsif picker_type == 'button' -%}
        <fieldset class="js product-form__input product-form__input--pill">
          <legend class="form__label">{{ option.name }}</legend>
          <!-- Debug: Rendering button picker for {{ option.name }} -->
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- else -%}
        <div class="product-form__input product-form__input--dropdown">
          <label class="form__label" for="Option-{{ section.id }}-{{ forloop.index0 }}">
            {{ option.name }}
          </label>
          <div class="select">
            {%- if picker_type == 'swatch_dropdown' -%}
              <span
                data-selected-dropdown-swatch="options[{{ option.name | escape }}]"
                class="dropdown-swatch"
              >
                {% render 'swatch', swatch: option.selected_value.swatch, shape: block.settings.swatch_shape %}
              </span>
            {%- endif -%}
            <select
              id="Option-{{ section.id }}-{{ forloop.index0 }}"
              class="select__select"
              name="options[{{ option.name | escape }}]"
              form="{{ product_form_id }}"
            >
              {% render 'product-variant-options',
                product: product,
                option: option,
                block: block,
                picker_type: picker_type
              %}
            </select>
            {% render 'icon-caret' %}
          </div>
        </div>
      {%- endif -%}
    {%- endfor -%}
    <script type="application/json">
      {{ product.variants | json }}
    </script>
     
  </variant-selects>
{%- endunless -%}

{% if show_color_picker %}
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Enhanced Color Picker Functionality
  const customColorButton = document.querySelector('.custom-color');
  const customColorInput = document.getElementById('custom-color-input');
  const customColorPicker = document.getElementById('custom-color-picker');
  const applyButton = document.querySelector('.apply-custom-color');
  const cancelButton = document.querySelector('.cancel-custom-color');

  // Show custom color input when custom color is clicked
  if (customColorButton && customColorInput) {
    customColorButton.addEventListener('click', function(e) {
      e.preventDefault();
      customColorInput.classList.remove('hide');
      customColorInput.classList.add('show');
      // Enable the custom color input when shown
      if (customColorPicker) {
        customColorPicker.disabled = false;
      }
    });
  }

  // Apply custom color
  if (applyButton) {
    applyButton.addEventListener('click', function() {
      const selectedColor = customColorPicker.value;
      
      // Update the custom color button background
      if (customColorButton) {
        customColorButton.style.background = selectedColor;
        customColorButton.setAttribute('data-color-name', 'Custom: ' + selectedColor);
        customColorButton.setAttribute('title', 'Custom: ' + selectedColor);
      }
      
      // Hide the input panel
      customColorInput.classList.remove('show');
      customColorInput.classList.add('hide');
      
      // Mark custom color as active
      document.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('active'));
      document.querySelectorAll('.color-label').forEach(label => label.classList.remove('active'));
      
      if (customColorButton) {
        customColorButton.classList.add('active');
        const customLabel = customColorButton.parentNode.querySelector('.color-label');
        if (customLabel) customLabel.classList.add('active');
      }
    });
  }

  // Cancel custom color selection
  if (cancelButton) {
    cancelButton.addEventListener('click', function() {
      customColorInput.classList.remove('show');
      customColorInput.classList.add('hide');
      // Disable the custom color input when hidden
      if (customColorPicker) {
        customColorPicker.disabled = true;
      }
    });
  }

  // Color option selection
  document.querySelectorAll('.color-option').forEach(colorOption => {
    colorOption.addEventListener('click', function(e) {
      // Remove active state from all options
      document.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('active'));
      document.querySelectorAll('.color-label').forEach(label => label.classList.remove('active'));
      
      // Add active state to clicked option
      this.classList.add('active');
      const label = this.parentNode.querySelector('.color-label');
      if (label) label.classList.add('active');
      
      // Hide custom color input if it's open and disable it
      if (customColorInput && !this.classList.contains('custom-color')) {
        customColorInput.classList.remove('show');
        customColorInput.classList.add('hide');
        // Disable the custom color input when a regular color is selected
        if (customColorPicker) {
          customColorPicker.disabled = true;
        }
      }
    });
  });
});
</script>
{% endif %}

<noscript class="product-form__noscript-wrapper-{{ section.id }}">
  <div class="product-form__input{% if product.has_only_default_variant %} hidden{% endif %}">
    <label class="form__label" for="Variants-{{ section.id }}">
      {{- 'products.product.product_variants' | t -}}
    </label>
    <div class="select">
      <select
        name="id"
        id="Variants-{{ section.id }}"
        class="select__select"
        form="{{ product_form_id }}"
      >
        {%- for variant in product.variants -%}
          <option
            {% if variant == product.selected_or_first_available_variant %}
              selected="selected"
            {% endif %}
            {% if variant.available == false %}
              disabled
            {% endif %}
            value="{{ variant.id }}"
          >
            {%- liquid
              echo variant.title
              echo variant.price | money | strip_html | prepend: ' - '
              if variant.available == false
                echo 'products.product.sold_out' | t | prepend: ' - '
              endif
              if variant.quantity_rule.increment > 1
                echo 'products.product.quantity.multiples_of' | t: quantity: variant.quantity_rule.increment | prepend: ' - '
              endif
              if variant.quantity_rule.min > 1
                echo 'products.product.quantity.minimum_of' | t: quantity: variant.quantity_rule.min | prepend: ' - '
              endif
              if variant.quantity_rule.max != null
                echo 'products.product.quantity.maximum_of' | t: quantity: variant.quantity_rule.max | prepend: ' - '
              endif
              # TODO: enable theme-check once `item_count_for_variant` is accepted as valid filter
              # theme-check-disable
              assign cart_quantity = cart | item_count_for_variant: variant.id
              # theme-check-enable
              if cart_quantity > 0
                echo 'products.product.quantity.in_cart_html' | t: quantity: cart_quantity | prepend: ' - '
              endif
            -%}
          </option>
        {%- endfor -%}
      </select>
      {% render 'icon-caret' %}
    </div>
  </div>
</noscript>
