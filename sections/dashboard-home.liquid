{%- assign access_code = customer.metafields.custom.access_code | default: 'PENDING' -%}
{%- assign company_name = customer.metafields.custom.company_name | default: customer.first_name -%}

<div class="dashboard-home" data-customer-email="{{ customer.email }}">

  {%- comment -%} Hero Section {%- endcomment -%}
  <div class="dashboard-hero">
    <h1 class="dashboard-hero-title">LATEST ORDERS</h1>
    <p class="dashboard-hero-subtitle">Quick overview. Manage everything.</p>
  </div>

  {%- comment -%} Module Cards {%- endcomment -%}
  <div class="dashboard-modules">
    {% render 'dashboard-module-card',
      icon: 'orders',
      title: 'ORDERS',
      description: 'Manage Orders',
      link: '?view=orders'
    %}
    {% render 'dashboard-module-card',
      icon: 'files',
      title: 'FILES',
      description: 'Upload Rework',
      link: '?view=files'
    %}
    {% render 'dashboard-module-card',
      icon: 'email',
      title: 'EMAIL',
      description: 'Contact Support',
      link: '?view=email'
    %}
  </div>

  {%- comment -%} Recent Orders Section {%- endcomment -%}
  <div class="dashboard-recent">
    <h2 class="dashboard-section-title">YOUR RECENT ORDERS</h2>
    <div class="dashboard-orders-grid" id="recent-orders-grid">
      {%- comment -%} Loaded via JavaScript {%- endcomment -%}
      <div class="dashboard-loading">
        <div class="spinner"></div>
        <p>Loading orders...</p>
      </div>
    </div>
    <div class="dashboard-view-all">
      <a href="?view=orders" class="dashboard-link">VIEW ALL ORDERS ‚Üí</a>
    </div>
  </div>

</div>

{% stylesheet %}
  /* Dashboard Home Styles */
  .dashboard-home {
    max-width: 1400px;
    margin: 0 auto;
    padding: 3rem 2rem;
  }

  .dashboard-hero {
    text-align: center;
    margin-bottom: 3rem;
  }

  .dashboard-hero-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: #222222;
    letter-spacing: 0.08rem;
    margin: 0 0 0.5rem 0;
    text-transform: uppercase;
  }

  .dashboard-hero-subtitle {
    font-size: 1.1rem;
    color: #666666;
    margin: 0;
  }

  .dashboard-modules {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    margin-bottom: 4rem;
  }

  .dashboard-recent {
    margin-bottom: 3rem;
  }

  .dashboard-section-title {
    font-size: 1.2rem;
    font-weight: 700;
    color: #222222;
    letter-spacing: 0.08rem;
    text-transform: uppercase;
    margin: 0 0 2rem 0;
    padding-bottom: 1rem;
    border-bottom: 2px solid #f0f0f0;
  }

  .dashboard-orders-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 2rem;
    margin-bottom: 2rem;
  }

  .dashboard-view-all {
    text-align: center;
  }

  .dashboard-link {
    display: inline-block;
    padding: 0.75rem 2rem;
    background: #222222;
    color: #ffffff;
    text-decoration: none;
    border-radius: 6px;
    font-size: 0.9rem;
    font-weight: 700;
    letter-spacing: 0.08rem;
    transition: all 0.3s ease;
  }

  .dashboard-link:hover {
    background: #000000;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .dashboard-loading {
    grid-column: 1 / -1;
    text-align: center;
    padding: 3rem;
    color: #999999;
  }

  .spinner {
    width: 40px;
    height: 40px;
    margin: 0 auto 1rem;
    border: 4px solid #f0f0f0;
    border-top: 4px solid #333333;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Order Card Styles */
  .order-card {
    background: #ffffff;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    cursor: pointer;
  }

  .order-card:hover {
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
    transform: translateY(-6px);
  }

  .order-card-image-wrapper {
    width: 100%;
    padding-top: 100%; /* 1:1 aspect ratio */
    position: relative;
    background: #f5f5f5;
  }

  .order-card-image-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #f5f5f5 0%, #eeeeee 100%);
    border: 2px dashed #dddddd;
  }

  .order-card-icon {
    color: #999999;
    margin-bottom: 0.5rem;
  }

  .placeholder-label {
    font-size: 0.75rem;
    font-weight: 600;
    color: #999999;
    letter-spacing: 0.1rem;
    text-transform: uppercase;
  }

  .order-card-content {
    padding: 1.5rem;
  }

  .order-card-id {
    font-size: 1.1rem;
    font-weight: 700;
    color: #222222;
    margin: 0 0 0.5rem 0;
    letter-spacing: 0.05rem;
    font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
  }

  .order-card-type {
    font-size: 0.85rem;
    color: #666666;
    margin: 0 0 1rem 0;
    text-transform: uppercase;
    letter-spacing: 0.05rem;
  }

  .order-card-divider {
    height: 1px;
    background: #f0f0f0;
    margin: 1rem 0;
  }

  .order-card-meta {
    list-style: none;
    padding: 0;
    margin: 0 0 1rem 0;
  }

  .order-card-meta li {
    font-size: 0.85rem;
    color: #666666;
    margin-bottom: 0.5rem;
  }

  .order-card-status {
    display: inline-block;
    padding: 0.4rem 1rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 700;
    letter-spacing: 0.08rem;
    text-transform: uppercase;
  }

  .status-pending {
    background: #FEF3C7;
    color: #92400E;
  }

  .status-in-progress,
  .status-in_progress {
    background: #DBEAFE;
    color: #1E40AF;
  }

  .status-completed {
    background: #D1FAE5;
    color: #065F46;
  }

  .dashboard-empty,
  .dashboard-error {
    grid-column: 1 / -1;
    text-align: center;
    padding: 3rem;
    color: #666666;
  }

  @media screen and (max-width: 749px) {
    .dashboard-home {
      padding: 2rem 1rem;
    }

    .dashboard-hero-title {
      font-size: 1.8rem;
    }

    .dashboard-modules {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .dashboard-orders-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }
{% endstylesheet %}

{% javascript %}
  class DashboardHome {
    constructor() {
      this.dashboardElement = document.querySelector('.dashboard-home');
      if (!this.dashboardElement) return;

      this.customerEmail = this.dashboardElement.dataset.customerEmail;
      this.ordersGrid = document.getElementById('recent-orders-grid');
      this.init();
    }

    async init() {
      await this.fetchRecentOrders();
    }

    async fetchRecentOrders() {
      try {
        const response = await fetch(
          `https://dawn-main-theme.vercel.app/api/submissions?email=${encodeURIComponent(this.customerEmail)}`
        );
        const data = await response.json();

        if (data.success) {
          this.renderOrders(data.data.slice(0, 4)); // Show 4 most recent
        } else {
          this.showError();
        }
      } catch (error) {
        console.error('Failed to fetch orders:', error);
        this.showError();
      }
    }

    renderOrders(orders) {
      if (orders.length === 0) {
        this.ordersGrid.innerHTML = `
          <div class="dashboard-empty">
            <p>No orders yet. Start your first project!</p>
          </div>
        `;
        return;
      }

      this.ordersGrid.innerHTML = orders.map(order => this.renderOrderCard(order)).join('');
    }

    renderOrderCard(order) {
      const date = new Date(order.created_at);
      const formattedDate = date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
      const garmentCount = order.data?.records?.garments?.length || 0;
      const fileCount = order.data?.files?.length || 0;

      return `
        <div class="order-card" data-order-id="${order.request_id}">
          <div class="order-card-image-wrapper">
            <!-- INSERT 3D GARMENT IMAGE HERE -->
            <!-- Dimensions: 200x200px -->
            <!-- Format: PNG transparent background -->
            <div class="order-card-image-placeholder">
              <svg class="order-card-icon" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 20h4v-4h-4m0-2h4v-4h-4M4 20h4v-4H4m0-2h4v-4H4m0-2h4V8H4M4 6h4V2H4m6 18h4v-4h-4m0-2h4v-4h-4m0-2h4V8h-4m0-2h4V2h-4" fill="currentColor"/>
              </svg>
              <span class="placeholder-label">3D IMAGE</span>
            </div>
          </div>
          <div class="order-card-content">
            <h3 class="order-card-id">${order.request_id}</h3>
            <p class="order-card-type">${order.submission_type.replace('-', ' ')}</p>
            <div class="order-card-divider"></div>
            <ul class="order-card-meta">
              <li>üìÖ ${formattedDate}</li>
              <li>üëï ${garmentCount} garments</li>
              <li>üìÅ ${fileCount} files</li>
            </ul>
            <div class="order-card-divider"></div>
            <span class="order-card-status status-${order.status.toLowerCase().replace(' ', '_')}">${order.status.toUpperCase()}</span>
          </div>
        </div>
      `;
    }

    showError() {
      this.ordersGrid.innerHTML = `
        <div class="dashboard-error">
          <p>Failed to load orders. Please refresh the page.</p>
        </div>
      `;
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new DashboardHome());
  } else {
    new DashboardHome();
  }
{% endjavascript %}

{% schema %}
{
  "name": "Dashboard Home",
  "class": "section-dashboard-home",
  "settings": [
    {
      "type": "header",
      "content": "Dashboard Settings"
    },
    {
      "type": "text",
      "id": "api_url",
      "label": "API URL",
      "default": "https://dawn-main-theme.vercel.app",
      "info": "Vercel API endpoint for submissions"
    }
  ],
  "presets": [
    {
      "name": "Dashboard Home"
    }
  ]
}
{% endschema %}
